// LAST UPDATED 12/2/2024
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//------- Documentation for prisma schema
// There are two roles,  USER and ADMIN
// There are also profiles which store a users data, each profile has a unique user
// (each user doesnt specifically have a unique profile, however we should make sure that this is the case)
// Admins do not have profiles 
// We use profiles to match people and decide what workout type or style they are into that day
// The user is purely for backend categorization and logging purposes
// We also have workouts which are used to store the workouts being writtten
// They will be sorted by type and later by experience 
generator client {
  provider = "prisma-client-js"
}

// LOOK HERE FOR VERCEL STUFF
datasource db {
  provider = "postgresql"
  // for local development
  // url      = env("DATABASE_URL")
  // for Vercel
   url       = env("NEON_URL")
   directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}


//The model for a user, it is largely a backend tool to store all the people who have accounts

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  role      Role    @default(USER)
}

// This is the model for a Profile, which is associated with a user
// The WorkoutType is defined below and will be updated quite frequently
// Image is optional at the current stage of development to not overcomplicate anything
// Note that Admins do not act as users, they do not have profiles and they will see a different set of pages when logging in
// In this way they will also not come up when we are looking for users to match profiles with since we will search through 
// Valid profiles not valid uesers
// For a user to be completed it the user should have a matching profile, we will have to ensure this in another section of the app
model Profile {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String
  lastName  String
  bio       String
  type      WorkoutType
  owner     String
}


// The current type of workout the user would like to find partners for and information about
// The status of this selection will be displayed on the user navbar and will be updated whenever the user
// Picks a new type of workout

enum WorkoutType {
  push 
  pull
  legs
  full
  cardio
}

// These are the actual workouts that users will get recomended based on their currently selected type
// The author is required for accountability among administrators as well as logging purpose
model Workout {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  type        WorkoutType
  difficulty  String    @default("Beginner") 
  exercises   Json      @default("[]")        
  author      String   
  createdAt   DateTime  @default(now())
}

